package parser

type Parser Peg {
    stack *nodeStack
}

Program <- Spaces Statements Spaces !.

Statements <- ( Statement SimpleSpaces StatementSep SimpleSpaces ) * Statement

StatementSep <- ( Newline / Comment / ';' ) +

Statement <- Assign / FuncCall { p.AddStatement() }

Assign <- Variable SimpleSpaces '=' Spaces Expression { p.AddAssign() }

FuncCall <- Name               { p.AddFuncName(text) }
            SimpleSpaces '(' Spaces FuncArgs Spaces ')' { p.AddFuncCall() }

FuncArgs <- ( Expression Spaces ',' Spaces ) * Expression ?

Expression <- Binop / NoBinopExpression

NoBinopExpression <- Unop / NoOpExpression

NoOpExpression <- Litteral / Variable / '(' Spaces Expression Spaces ')'

Litteral <- Number { p.AddLitteral(text) }

Variable <- Name { p.AddVariable(text) }

Binop <- NoBinopExpression SimpleSpaces
        Op  { p.AddBinop(text) }
        Spaces Expression

Unop <- Op Spaces NoOpExpression { p.AddUnop(text) }

Op <- '+'

Number <- < Digit + >

Name <- < AlphaChar AlphaNumericalChar * >

AlphaChar <- [a-zA-Z_]

Digit <- [0-9]

AlphaNumericalChar <- AlphaChar / Digit

Comment <- '#' (!Newline .)* Newline

Spaces <- Space *

Space <- SimpleSpace / Newline / Comment

SimpleSpaces <- SimpleSpace *

SimpleSpace <- ' ' / '\t'

Newline <- '\r\n' / '\n' / '\r'
