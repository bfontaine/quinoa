package parser

type Parser Peg {
    stack *nodeStack
}

Program <- Spaces Statements Spaces !.

Statements <- (Statement Spaces StatementSep Spaces) * Statement

StatementSep <- ";" / Newline / Comment

Statement <- Assign / FuncCall { p.AddStatement() }

Assign <- Variable Spaces '=' Spaces Expression { p.AddAssign() }

FuncCall <- Name               { p.AddFnCall(text) }
            Spaces '(' Spaces FuncArgs Spaces ')'

FuncArgs <- ( Expression Spaces ',' Spaces ) * Expression ?

Expression <- NoBinopExpression / BinOp

NoBinopExpression <- Litteral / Variable / UnOp / '(' Spaces Expression Spaces ')'

Litteral <- Number { p.AddLitteral(text) }

Variable <- Name { p.AddVariable(text) }

BinOp <- NoBinopExpression Spaces
        Op  { p.AddBinOp(text) }
        Spaces Expression

UnOp <- Op Spaces Expression { p.AddUnOp(text) }

Op <- '+'

Number <- < Digit + >

Name <- < AlphaChar AlphaNumericalChar * >

AlphaChar <- [a-zA-Z_]

Digit <- [0-9]

AlphaNumericalChar <- AlphaChar / Digit

Comment <- '#' (!Newline .)* Newline

Spaces <- Space *

Space <- ' ' / '\t' / Newline / Comment

Newline <- '\r\n' / '\n' / '\r'
