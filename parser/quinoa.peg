package parser

import "github.com/bfontaine/quinoa/ast"

type Parser Peg {
    root *ast.Node
    stack *nodeStack
}

Program <- Spaces Statements Spaces !.

Statements <- Statement ( SimpleSpaces StatementSep SimpleSpaces Statement ) *

StatementSep <- ( Newline / Comment / ';' ) +

Statement <- Assign / FuncCall { p.AddStatement() }

Assign <- Variable SimpleSpaces '=' Spaces Expression { p.AddAssign() }

FuncCall <- Name SimpleSpaces '(' { p.AddFuncCall(text) }
            Spaces FuncArgs Spaces ')'

FuncArgs <- ( FuncArg Spaces ',' Spaces ) * FuncArg ?

FuncArg <- Expression { p.AddFuncCallArg() }

Expression <- Binop / NoBinopExpression

NoBinopExpression <- Unop / NoOpExpression

NoOpExpression <- FuncCall / Litteral / Variable / '(' Spaces Expression Spaces ')'

Litteral <- Number { p.AddLitteral(text) }

Variable <- Name { p.AddVariable(text) }

Binop <- NoBinopExpression SimpleSpaces < Op > Spaces Expression { p.AddBinop(text) }

Unop <- Op Spaces NoOpExpression { p.AddUnop(text) }

Op <- '+'

Number <- < Digit + >

Name <- < AlphaChar AlphaNumericalChar * >

AlphaChar <- [a-zA-Z_]

Digit <- [0-9]

AlphaNumericalChar <- AlphaChar / Digit

Comment <- '#' (!Newline .)* Newline

Spaces <- Space *

Space <- SimpleSpace / Newline / Comment

SimpleSpaces <- SimpleSpace *

SimpleSpace <- ' ' / '\t'

Newline <- '\r\n' / '\n' / '\r'
